#!/usr/local/bin/python3
""" The user-face simulation runner """
import os
import sys
from ems.driver import read_user_input, Driver

# Initialize configurations
sim_args = read_user_input()
driver = Driver()
driver.create_objects(sim_args)

# Check if the figures folder exists, and whether in the right directory.
output_dir = "./figures/" + driver.objects['name'] + "/"
current_dir = os.getcwd()
if 'Algorithms' != current_dir.split('/')[-1]:
    raise Exception("Run this simulator from the repository directory. ")

subdirs = [dirs for roots, dirs, _ in os.walk('.')]
subdirs = filter(lambda subdir: 'figures' in subdir, subdirs)

if not any(subdirs):
    os.mkdir('figures')

results_dir = [dirs for roots, dirs, _ in os.walk('./figures')]
results_dir = filter(lambda subdir:
                     driver.objects['name'] in subdir, results_dir)

if not any(results_dir):
    os.mkdir(output_dir)

# # Check if the results folder exists
output_dir = "./results/" + driver.objects['name'] + "/"
current_dir = os.getcwd()

subdirs = [dirs for roots, dirs, _ in os.walk('.')]
subdirs = filter(lambda subdir: 'results' in subdir, subdirs)

if not any(subdirs):
    os.mkdir('results')

results_dir = [dirs for roots, dirs, _ in os.walk('./results')]
results_dir = filter(lambda subdir:
                     driver.objects['name'] in subdir, results_dir)

if not any(results_dir):
    os.mkdir(output_dir)

# Save as much information BEFORE the simulator runs in case it crashes.
# driver.objects['simulation_bases'].write_to_file(
    # output_dir + '/chosen_bases.csv')

driver.objects['ambulances'].write_to_file(
    output_dir + '/chosen_ambulances.csv')

#· ···driver.objects['hospitals'].write_to_file(
#· ···   output_dir + '/chosen_hospitals.csv')

# Run the simulator.
print("Initiated Simulation:", driver.objects['name'], file=sys.stderr)
sim = driver.objects["simulator"]
case_record_set, metric_aggregator = sim.run()

#·····case_record_set.write_to_file('../processed_cases.csv')

# Save the finished simulator information

case_record_set.write_to_file(output_dir + '/processed_cases.csv')
metric_aggregator.write_to_file(output_dir + '/metrics.csv')

print("Concluded Simulation: {}".format(driver.objects['name']),
      file=sys.stderr)
